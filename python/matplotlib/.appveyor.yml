# With infos from
# http://tjelvarolsson.com/blog/how-to-continuously-test-your-python-code-on-windows-using-appveyor/
# https://packaging.python.org/en/latest/appveyor/
# https://github.com/rmcgibbo/python-appveyor-conda-example

# Backslashes in quotes need to be escaped: \ -> "\\"
branches:
  except:
    - /auto-backport-.*/
    - /^v\d+\.\d+\.[\dx]+-doc$/

clone_depth: 50

environment:

  global:
    PYTHONFAULTHANDLER: 1
    PYTHONIOENCODING: UTF-8
    PYTEST_ARGS: -raR --numprocesses=auto --timeout=300 --durations=25
                 --cov-report= --cov=lib --log-level=DEBUG

  matrix:
    # In theory we could use a single CONDA_INSTALL_LOCN because we construct
    # the envs anyway. But using one for the right python version hopefully
    # making things faster due to package caching.
    - PYTHON_VERSION: "3.7"
      CONDA_INSTALL_LOCN: "C:\\Miniconda37-x64"
      TEST_ALL: "no"
      EXTRAREQS: "-r requirements/testing/travis_extra.txt"
    - PYTHON_VERSION: "3.8"
      CONDA_INSTALL_LOCN: "C:\\Miniconda37-x64"
      TEST_ALL: "no"
      EXTRAREQS: "-r requirements/testing/travis_extra.txt"

# We always use a 64-bit machine, but can build x86 distributions
# with the PYTHON_ARCH variable
platform:
    - x64

# all our python builds have to happen in tests_script...
build: false

cache:
  - '%LOCALAPPDATA%\pip\Cache'
  - '%USERPROFILE%\.cache\matplotlib'

init:
  - echo %PYTHON_VERSION% %CONDA_INSTALL_LOCN%

install:
  - set PATH=%CONDA_INSTALL_LOCN%;%CONDA_INSTALL_LOCN%\scripts;%PATH%;
  - conda config --set always_yes true
  - conda config --set show_channel_urls yes
  - conda config --prepend channels conda-forge

  # For building, use a new environment
  - conda create -q -n test-environment python=%PYTHON_VERSION% tk
  - activate test-environment
  # pull pywin32 from conda because on py38 there is something wrong with finding
  # the dlls when insalled from pip
  - conda install -c conda-forge pywin32
  - echo %PYTHON_VERSION% %TARGET_ARCH%
  # Install dependencies from PyPI.
  - python -mpip install --upgrade -r requirements/testing/travis_all.txt %EXTRAREQS% %PINNEDVERS%
  # Install optional dependencies from PyPI.
  # Sphinx is needed to run sphinxext tests
  - python -mpip install --upgrade sphinx
  # Show the installed packages + versions
  - conda list

test_script:
  # Now build the thing..
  - set LINK=/LIBPATH:%cd%\lib
  - pip install -ve .
  # this should show no freetype dll...
  - set "DUMPBIN=%VS140COMNTOOLS%\..\..\VC\bin\dumpbin.exe"
  - '"%DUMPBIN%" /DEPENDENTS lib\matplotlib\ft2font*.pyd | findstr freetype.*.dll && exit /b 1 || exit /b 0'

  # this are optional dependencies so that we don't skip so many tests...
  - if x%TEST_ALL% == xyes conda install -q ffmpeg inkscape miktex
  # missing packages on conda-forge for imagemagick
  # This install sometimes failed randomly :-(
  #- choco install imagemagick

  # Test import of tkagg backend
  - python -c "import matplotlib as m; m.use('tkagg'); import matplotlib.pyplot as plt; print(plt.get_backend())"
  # tests
  - echo The following args are passed to pytest %PYTEST_ARGS%
  - pytest %PYTEST_ARGS%

after_test:
  # After the tests were a success, build wheels.
  # Hide the output, the copied files really clutter the build log...
  - 'python setup.py bdist_wheel > NUL:'
  - dir dist\
  - echo finished...

artifacts:
  - path: dist\*
    name: packages

  - path: result_images\*
    name: result_images
    type: zip

on_finish:
  - pip install codecov
  - codecov -e PYTHON_VERSION PLATFORM

on_failure:
  # Generate a html for visual tests
  - python tools/visualize_tests.py --no-browser
  - echo zipping images after a failure...
  - 7z a result_images.zip result_images\ | grep -v "Compressing"
  - appveyor PushArtifact result_images.zip

matrix:
  fast_finish: true
